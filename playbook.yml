---
  - name: Provision an EC2 Instance
    hosts: local
    connection: local
    gather_facts: False
    tags: provisioning
    # Necessary Variables for creating/provisioning the EC2 Instance
    #vars_prompt:
    #- name: "keypair" #变量名
    #  prompt: "Input new keypair name(if you use a second instance than you need to change it)" #提示
    #  default: "new_key" #默认值
    #  private: no
    vars:
      instance_type: t2.micro
      security_group: security2 # Change the security group name here
      image: ami-ba602bc2 # This is an AMI i created myself
      keypair: new_key # create a new key pair
      region: us-west-2 # Change the Region
      count: 1
   

    # Task that will be used to Launch/Create an EC2 Instance
    tasks:

      - name: Create a security group
        local_action: 
          module: ec2_group
          name: "{{ security_group }}"
          description: Security Group for webserver Servers
          region: "{{ region }}"
          rules:
            - proto: tcp
              from_port: 22
              to_port: 22
              cidr_ip: 0.0.0.0/0
            - proto: tcp
              from_port: 80
              to_port: 80
              cidr_ip: 0.0.0.0/0
            - proto: tcp
              from_port: 443
              to_port: 443
              cidr_ip: 0.0.0.0/0
          rules_egress:
            - proto: all
              cidr_ip: 0.0.0.0/0
        register: basic_firewall
        
        
      - name: create a new key
        ec2_key:
            name: "{{ keypair }}"
            region: "{{ region }}"
        register: ec2_key_result

      - name: Save private key
        copy: content="{{ ec2_key_result.key.private_key }}" dest="~/.ssh/{{ keypair }}.pem" mode=0600
        when: ec2_key_result.changed

      - name: Launch the new EC2 Instance
        local_action: ec2 
                      group={{ security_group }} 
                      instance_type={{ instance_type}} 
                      image={{ image }} 
                      wait=true 
                      region={{ region }} 
                      keypair={{ keypair }}
                      count={{count}}
        register: ec2

      - name: Add the newly created EC2 instance(s) to the local host group (located inside the directory)
        local_action: lineinfile 
                      dest="./hosts" 
                      regexp={{ item.public_ip }} 
                      insertafter="[webserver]" line={{ item.public_ip }}
        with_items: "{{ec2.instances}}"


      - name: Wait for SSH to come up
        local_action: wait_for 
                      host={{ item.public_ip }} 
                      port=22 
                      state=started
        with_items: "{{ec2.instances}}"

      - name: Add tag to Instance(s)
        local_action: ec2_tag resource={{ item.id }} region={{ region }} state=present
        with_items: "{{ec2.instances}}"
        args:
          tags:
            Name: webserver
            
      - name: Refresh hosts file
        meta: refresh_inventory
  
         
  - hosts: webserver
    name: Configure instance(s)
    user: ubuntu
    gather_facts: False
    become: yes
    become_method: sudo
    
    vars: 
     
      wp_mysql_db: wordpress
      wp_mysql_user: wordpress
      wp_mysql_password: admin
      
    pre_tasks:
      - name: Install python for Ansible
        raw: test -e /usr/bin/python || (apt -y update && apt install -y python-minimal)
        register: output
        changed_when: output.stdout != ""
      - setup: # aka gather_facts

    tasks:
        
      - name: Install Apache2
        apt:
             name: "{{item}}"
             state: present
        with_items: 
          - apache2
          - apache2-doc
          - apache2-utils

      - name: Install Mysql Server
        apt:
          name: mysql-server
          state: present
          update_cache: yes
         
      - name: Install Mysql python module
        apt:
          name: python-mysqldb
          state: present

      - name: Start Mysql Server
        sudo: yes
        service: 
          name: mysql
          state: started
          enabled: true

      - name: Installing php
        apt: 
          name: "{{item}}" 
          state: present
        with_items:
        - php
        - php-cli
        - php-curl
        - php-xml
        - php-xmlrpc
        - php-gd
        - php-mbstring
        - php-mcrypt
        - php-mysql
        - php-zip

      - name: Install common PHP Extensions
        apt: 
          name: libapache2-mod-php
          state: present
        notify:
          - restart apache2


      - name:  "Start apache, Mysql,and Php"
        service:  "name={{ item }} state=started"
        with_items:
        - apache2
        - mysql
        
      - name: Create mysql database
        mysql_db: name={{ wp_mysql_db }}  state=present
        become: yes

      - name: Create mysql user
        mysql_user: 
          name={{ wp_mysql_user }} 
          password={{ wp_mysql_password }} 
          priv='*.*:ALL,GRANT'
       
        become: yes 

      - name: Download WordPress
        get_url: 
          url: https://wordpress.org/latest.tar.gz 
          dest: /tmp/wordpress.tar.gz

      - name: Extract WordPress
        unarchive: 
          src: https://wordpress.org/latest.tar.gz 
          dest: /var/www/html/
          remote_src: yes
        become: yes


      - name: Copy sample config file
        command: mv /var/www/html/wordpress/wp-config-sample.php /var/www/html/wordpress/wp-config.php creates=/var/www/html/wordpress/wp-config.php
        become: yes

      - name: Update WordPress config file
        lineinfile:
            dest: /var/www/html/wordpress/wp-config.php
            regexp: "{{ item.regexp }}"
            line: "{{ item.line }}"
        with_items:
            - {'regexp': "define\\('DB_NAME', '(.)+'\\);", 'line': "define('DB_NAME', '{{wp_mysql_db}}');"}        
            - {'regexp': "define\\('DB_USER', '(.)+'\\);", 'line': "define('DB_USER', '{{wp_mysql_user}}');"}        
            - {'regexp': "define\\('DB_PASSWORD', '(.)+'\\);", 'line': "define('DB_PASSWORD', '{{wp_mysql_password}}');"}
        become: yes
        
    handlers:
    - name: restart apache2
      service: 
        name: apache2
        state: restarted





