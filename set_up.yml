#this playbook use to set up database instance and web_server instances.

  - name: Set up servers 
    hosts: local
    connection: local
    gather_facts: False
    tags: provisioning

    vars:
      instance_type: t2.micro
      security_group: security2
      image: ami-ba602bc2
      keypair: new_key
      region: us-west-2
      large_volumes:
        - device_name: /dev/sda1
          volume_size: 15
      small_volumes:
        - device_name: /dev/sda1
          volume_size: 8
      database_count: 1
      webserver_count: 3
      nginx_count: 1

    tasks:

      - name: Create a new EC2 key
        ec2_key:
          name: "{{ keypair }}"
          region: "{{ region }}"
        register: ec2_key_result

      - name: Save private key
        copy: content="{{ ec2_key_result.key.private_key }}" dest="~/.ssh/new_key.pem" mode=0600
        when: ec2_key_result.changed

      - name: Create a security group
        local_action: 
          module: ec2_group
          name: "{{ security_group }}"
          description: Security Group for webserver Servers
          region: "{{ region }}"
          rules:
            # HTTP
            - proto: tcp
              from_port: 80
              to_port: 80
              cidr_ip: 0.0.0.0/0
              
            # MYSQL
            - proto: tcp
              from_port: 3306
              to_port: 3306
              cidr_ip: 0.0.0.0/0

            # SSH
            - proto: tcp
              from_port: 22
              to_port: 22
              cidr_ip: 0.0.0.0/0

            # HTTPS
            - proto: tcp
              from_port: 443
              to_port: 443
              cidr_ip: 0.0.0.0/0
          rules_egress:
            - proto: all
              cidr_ip: 0.0.0.0/0
        register: basic_firewall

      # set up database_server
      - name: set up database_server
        local_action: ec2
                      group={{ security_group }}
                      instance_type={{ instance_type }}
                      image={{ image }}
                      wait=true
                      region={{ region }}
                      keypair={{ keypair }}
                      volumes={{ large_volumes }}
                      count={{ database_count }}
        register: database_server

      - name: Add the newly created EC2 instance(s) to the local host group (located inside the directory)
        local_action: lineinfile
                      dest="./hosts"
                      regexp={{ item.public_ip }}
                      insertafter="database" line="{{ item.public_ip }} ansible_python_interpreter=/usr/bin/python3"
        with_items: "{{ database_server.instances }}"

      - name: Wait for SSH to come up
        local_action: wait_for
                      host={{ item.public_ip }}
                      port=22
                      state=started
        with_items: "{{ database_server.instances }}"

      - name: Add tag to Instance(s)
        local_action: ec2_tag resource={{ item.id }} region={{ region }} state=present
        with_items: "{{ database_server.instances }}"
        args:
          tags:
            Name: database

      - name: Refresh hosts file
        meta: refresh_inventory

      # set up web_server
      - name: set up web_server
        local_action: ec2
                      group={{ security_group }}
                      instance_type={{ instance_type}}
                      image={{ image }}
                      wait=true
                      region={{ region }}
                      keypair={{ keypair }}
                      volumes={{ large_volumes }}
                      count={{ webserver_count }}
        register: web_server

      - name: Add the newly created EC2 instance(s) to the local host group (located inside the directory)
        local_action: lineinfile
                      dest="./hosts"
                      regexp={{ item.public_ip }}
                      insertafter="web_server" line="{{ item.public_ip }} ansible_python_interpreter=/usr/bin/python3"
        with_items: "{{ web_server.instances }}"

      - name: Wait for SSH to come up
        local_action: wait_for
                      host={{ item.public_ip }}
                      port=22
                      state=started
        with_items: "{{ web_server.instances }}"

      - name: Add tag to Instance(s)
        local_action: ec2_tag resource={{ item.id }} region={{ region }} state=present
        with_items: "{{ web_server.instances }}"
        args:
          tags:
            Name: web_server

      - name: Refresh hosts file
        meta: refresh_inventory
      # set up nginx_server
      - name: set up nginx_server
        local_action: ec2
                      group={{ security_group }}
                      instance_type={{ instance_type}}
                      image={{ image }}
                      wait=true
                      region={{ region }}
                      keypair={{ keypair }}
                      volumes={{ small_volumes }}
                      count={{ nginx_count }}
        register: nginx_server

      - name: Add the newly created EC2 instance(s) to the local host group (located inside the directory)
        local_action: lineinfile
                      dest="./hosts"
                      regexp={{ item.public_ip }}
                      insertafter="nginx" line="{{ item.public_ip }} ansible_python_interpreter=/usr/bin/python3"
        with_items: "{{ nginx_server.instances }}"

      - name: Wait for SSH to come up
        local_action: wait_for
                      host={{ item.public_ip }}
                      port=22
                      state=started
        with_items: "{{ nginx_server.instances }}"

      - name: Add tag to Instance(s)
        local_action: ec2_tag resource={{ item.id }} region={{ region }} state=present
        with_items: "{{ nginx_server.instances }}"
        args:
          tags:
            Name: nginx

      - name: Refresh hosts file
        meta: refresh_inventory


#      - wait_for: delay=1
      
#———————————————————————————————————————————
  - name: setup nginx management server
    hosts: nginx
    remote_user: ubuntu
    gather_facts: False
    become_user: root
    become: true

    vars:
      db_user: wordpress
      db_name: wordpress
      db_password: admin
      server_ip_1: "{{ groups.web_server.0 }}"
      server_ip_2: "{{ groups.web_server.1 }}"
      server_ip_3: "{{ groups.web_server.2 }}"
      nginx_ip: "{{ groups.nginx.0 }}"

    tasks:

      - name: Update Ubuntu & Install essential tools
        become: yes
        apt: 
          name: "{{ packages }}"
          state: latest
          update_cache: yes
        vars:
          packages:
            - python-psycopg2
            - python3-psycopg2

      # install nginx
      - name: Install nginx
        become: yes
        apt:
          name: nginx
          update_cache: yes
          state: latest
          
      - name: enable nginx
        service:
          name: nginx
          state: started
          
#      - file:
#        path: "/root/log"
#        state: directory
          
      # editing config file 
      - name: edit config file
        become: yes
        blockinfile:
          path: /etc/nginx/nginx.conf
          insertafter: "http {"
          content: |
            upstream mysite {
                server {{ server_ip_1 }}:80 weight=1;
                server {{ server_ip_2 }}:80 weight=1;
                server {{ server_ip_3 }}:80 backup;
            }

            server {
                listen 80;
                server_name {{ nginx_ip }};
                location / {
                    root html;
                    index index.html;
                    proxy_pass http://mysite;
                }
            }
            
            
      - name: Start Nginx service
        service:
            name: nginx
            state: restarted
        become: yes
         
      # reload nginx
      - name : reload nginx
        #path: /usr/sbin/
        service:  name=nginx state=reloaded

#——————————————————————————————————————————————————————

  - name: setup database server
    hosts: database
    remote_user: ubuntu
    gather_facts: False
    become_user: root
    become: yes
    become_method: sudo
    
    
    vars:
      wp_mysql_db: wordpress
      wp_mysql_user: wordpress
      wp_mysql_password: admin
      
    pre_tasks:
      - name: Install python for Ansible
        raw: test -e /usr/bin/python || (apt -y update && apt install -y python-minimal)
        register: output
        changed_when: output.stdout != ""
      - setup: # aka gather_facts
        
      - name: Install required software
        apt: name={{ item }} state=present
        sudo: yes
        with_items:
          - apache2
          - build-essential
          - python-dev
          - libmysqlclient-dev
          - python-mysqldb
          - mysql-server
          - mysql-client
          - python-pip
          - python3-pip
      
    tasks:
      - name: Install Mysql Server
        apt:
          name: mysql-server
          state: present
          update_cache: yes

      - name: Install Mysql python module
        apt:
          name: python-mysqldb
          state: present

      - name: Start Mysql Server
        sudo: yes
        service: 
            name: mysql
            state: started
            enabled: true

      - name: change some lines in mysql database file
        lineinfile: backup=yes state=present dest=/etc/mysql/mysql.conf.d/mysqld.cnf
            state=absent
            regexp='^bind'
        tags:
            - delete bind
            
      - name: Accessing and Logging In MySQL
        shell: |
            sudo -S mysql -u root -p admin <<EOF
            CREATE DATABASE wordpress DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci; 
            create user 'wordpress'@'%' IDENTIFIED BY 'admin'; 
            GRANT ALL ON wordpress.* TO 'wordpress'@'%' IDENTIFIED BY 'admin';
            FLUSH PRIVILEGES;
            exit
            EOF


      - name: restart mysql
        service:
          name: mysql
          state: restarted
          enabled: true
        
 #——————————————————————————————————————————————————————————————————————
  - name: setup wordpress web server
    hosts: web_server
    remote_user: ubuntu
    gather_facts: False
    become_user: root
    become: yes
    become_method: sudo
    
    vars: 
     
      wp_mysql_db: wordpress
      wp_mysql_user: wordpress
      wp_mysql_password: admin
      wp_mysql_host: "{{ groups.database.0 }}:3306"
      
    pre_tasks:
      - name: Install python for Ansible
        raw: test -e /usr/bin/python || (apt -y update && apt install -y python-minimal)
        register: output
        changed_when: output.stdout != ""
 
    tasks:
    
     - name: Install Apache2
       apt:
            name: "{{item}}"
            state: present
       with_items: 
            - apache2
            - apache2-doc
            - apache2-utils
           
     - name: Installing php
       apt: 
            name: "{{item}}" 
            state: present
       with_items:
            - php
            - php-cli
            - php-curl
            - php-xml
            - php-xmlrpc
            - php-gd
            - php-mysql
        
     - name: Install common PHP Extensions
       apt: 
            name: libapache2-mod-php
            state: present
       notify:
            - restart apache2
          
     - name:  "Start apache Php"
       service:  "name={{ item }} state=started"
       with_items:
       - apache2
       
     - name: Install Mysql client
       apt:
          name: mysql-client
          state: present
          update_cache: yes
    
    
     - name: Download WordPress
       get_url: 
         url: https://wordpress.org/latest.tar.gz 
         dest: /tmp/wordpress.tar.gz

     - name: Extract WordPress
       unarchive: 
         src: https://wordpress.org/latest.tar.gz 
         dest: /var/www/html/
         remote_src: yes
       become: yes


     - name: Copy sample config file
       command: mv /var/www/html/wordpress/wp-config-sample.php /var/www/html/wordpress/wp-config.php creates=/var/www/html/wordpress/wp-config.php
       become: yes

     - name: Update WordPress config file
       lineinfile:
         dest: /var/www/html/wordpress/wp-config.php
         regexp: "{{ item.regexp }}"
         line: "{{ item.line }}"
       with_items:
           - {'regexp': "define\\('DB_NAME', '(.)+'\\);", 'line': "define('DB_NAME', '{{wp_mysql_db}}');"}        
           - {'regexp': "define\\('DB_USER', '(.)+'\\);", 'line': "define('DB_USER', '{{wp_mysql_user}}');"}        
           - {'regexp': "define\\('DB_PASSWORD', '(.)+'\\);", 'line': "define('DB_PASSWORD', '{{wp_mysql_password}}');"}
           - {'regexp': "define\\('DB_Host', '(.)+'\\);", 'line': "define('DB_Host', '{{wp_mysql_host}}');"}
       become: yes
       

     - name: Waiting for installation
       wait_for: host=127.0.0.1 port=80 delay=10 timeout=600
       
    handlers:
    - name: restart apache2
      service: 
        name: apache2
        state: restarted
